// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HotelServiceClient is the client API for HotelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HotelServiceClient interface {
	CheckRoom(ctx context.Context, in *CheckRoomRequest, opts ...grpc.CallOption) (*CheckRoomResponse, error)
}

type hotelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHotelServiceClient(cc grpc.ClientConnInterface) HotelServiceClient {
	return &hotelServiceClient{cc}
}

func (c *hotelServiceClient) CheckRoom(ctx context.Context, in *CheckRoomRequest, opts ...grpc.CallOption) (*CheckRoomResponse, error) {
	out := new(CheckRoomResponse)
	err := c.cc.Invoke(ctx, "/hotel_service.HotelService/CheckRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HotelServiceServer is the server API for HotelService service.
// All implementations must embed UnimplementedHotelServiceServer
// for forward compatibility
type HotelServiceServer interface {
	CheckRoom(context.Context, *CheckRoomRequest) (*CheckRoomResponse, error)
	mustEmbedUnimplementedHotelServiceServer()
}

// UnimplementedHotelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHotelServiceServer struct {
}

func (UnimplementedHotelServiceServer) CheckRoom(context.Context, *CheckRoomRequest) (*CheckRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckRoom not implemented")
}
func (UnimplementedHotelServiceServer) mustEmbedUnimplementedHotelServiceServer() {}

// UnsafeHotelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HotelServiceServer will
// result in compilation errors.
type UnsafeHotelServiceServer interface {
	mustEmbedUnimplementedHotelServiceServer()
}

func RegisterHotelServiceServer(s *grpc.Server, srv HotelServiceServer) {
	s.RegisterService(&_HotelService_serviceDesc, srv)
}

func _HotelService_CheckRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HotelServiceServer).CheckRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hotel_service.HotelService/CheckRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HotelServiceServer).CheckRoom(ctx, req.(*CheckRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HotelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hotel_service.HotelService",
	HandlerType: (*HotelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckRoom",
			Handler:    _HotelService_CheckRoom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hotel_client.proto",
}
